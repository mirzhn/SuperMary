from login import bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import *
from util import send_text, Dialog
from telebot import types
from telegram import BotCommandScopeChat, Update

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã. –î–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"
async def start(update, context):
    await context.bot.delete_my_commands(scope=BotCommandScopeChat(chat_id=update.effective_chat.id))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_create_report = types.KeyboardButton(text='üîç –°–æ–∑–¥–∞—Ç—å –ø–æ–∏—Å–∫')
    markup.add(button_create_report)
    bot.send_message(update.effective_chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –°–æ–∑–¥–∞—Ç—å –ø–æ–∏—Å–∫"', reply_markup=markup)

async def choose_chat(update, context):
    dialog.mode = "choose_chat"
    await send_text(update, context, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç')

async def message_processing(update, context):
    if dialog.mode == "choose_chat":
        await check_chat(update, context)

async def check_chat(update, context):
    text = update.message.text
    if text == "1":
        await send_text(update, context, '–°—Å—ã–ª–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É')
    else:
        await choose_period(update, context)

async def choose_period(update, context):
    markup = types.InlineKeyboardMarkup()
    button_day = types.InlineKeyboardButton("–î–µ–Ω—å", callback_data='choose_period_–î–µ–Ω—å')
    button_week = types.InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data='choose_period_–ù–µ–¥–µ–ª—è')
    button_month = types.InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data='choose_period_–ú–µ—Å—è—Ü')
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')

    markup.row(button_day, button_week)
    markup.row(button_month, button_back)

    bot.send_message(update.effective_chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞', parse_mode='html', reply_markup=markup)

async def create_report(update, context):
    query = update.callback_query.data
    await send_text(update, context, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥ - ' + query[14:])
    await send_text(update, context, '–û—Ç—á–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

app = ApplicationBuilder().token(TOKEN_BOT).build()
dialog = Dialog()
dialog.mode = None

def main():
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.Text(['üîç –°–æ–∑–¥–∞—Ç—å –ø–æ–∏—Å–∫']), choose_chat))

    #–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_processing))

    #callback
    app.add_handler(CallbackQueryHandler(choose_chat, pattern="back"))
    app.add_handler(CallbackQueryHandler(create_report, pattern="choose_period_*"))
    app.add_handler(CallbackQueryHandler(choose_chat, pattern="choose_chat"))
    app.run_polling()

if __name__ == "__main__":
    main()
